import { WeatherData } from "@/types/weather";

export interface WeatherInsight {
  id: string;
  type: "outfit" | "activity" | "health" | "travel" | "general";
  title: string;
  description: string;
  icon: string;
  confidence: number;
  priority: "low" | "medium" | "high";
}

export interface AIWeatherService {
  generateInsights(weather: WeatherData): Promise<WeatherInsight[]>;
  getChatResponse(question: string, weather: WeatherData): Promise<string>;
}

export class GeminiWeatherService implements AIWeatherService {
  private apiKey: string;
  private baseURL = "https://generativelanguage.googleapis.com/v1beta";

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  async generateInsights(weather: WeatherData): Promise<WeatherInsight[]> {
    try {
      const prompt = this.createInsightPrompt(weather);
      
      const response = await fetch(`${this.baseURL}/models/gemini-1.5-flash-latest:generateContent?key=${this.apiKey}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          contents: [{ parts: [{ text: prompt }] }],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 1024,
          }
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to get AI insights");
      }

      const data = await response.json();
      const aiResponse = data.candidates[0].content.parts[0].text;
      
      return this.parseAIResponse(aiResponse, weather);
      
    } catch (error) {
      console.error("AI insights error:", error);
      return this.getFallbackInsights(weather);
    }
  }

  async getChatResponse(question: string, weather: WeatherData): Promise<string> {
    try {
      const context = this.createWeatherContext(weather);
      const prompt = `B·∫°n l√† tr·ª£ l√Ω th·ªùi ti·∫øt. Th·ªùi ti·∫øt hi·ªán t·∫°i: ${context}. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát: ${question}`;
      
      const response = await fetch(`${this.baseURL}/models/gemini-1.5-flash-latest:generateContent?key=${this.apiKey}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          contents: [{ parts: [{ text: prompt }] }],
          generationConfig: {
            temperature: 0.7,
            maxOutputTokens: 512,
          }
        }),
      });

      if (!response.ok) {
        throw new Error("API request failed");
      }

      const data = await response.json();
      return data.candidates[0].content.parts[0].text;
      
    } catch (error) {
      console.error("AI chat error:", error);
      const localAI = new LocalAIWeatherService();
      return await localAI.getChatResponse(question, weather);
    }
  }

  private createInsightPrompt(weather: WeatherData): string {
    return `T·∫°o g·ª£i √Ω th·ªùi ti·∫øt cho: V·ªã tr√≠ ${weather.name}, nhi·ªát ƒë·ªô ${weather.main.temp}¬∞C, th·ªùi ti·∫øt ${weather.weather[0].description}. Tr·∫£ l·ªùi JSON: {"insights": [{"type": "outfit", "title": "Ti√™u ƒë·ªÅ", "description": "M√¥ t·∫£", "icon": "üåû", "confidence": 0.9, "priority": "high"}]}`;
  }

  private createWeatherContext(weather: WeatherData): string {
    return `${weather.name}: ${weather.main.temp}¬∞C, ${weather.weather[0].description}`;
  }

  private parseAIResponse(response: string, weather: WeatherData): WeatherInsight[] {
    try {
      const jsonMatch = response.match(/{[\s\S]*}/);
      const jsonStr = jsonMatch ? jsonMatch[0] : response;
      const parsed = JSON.parse(jsonStr);
      return parsed.insights.map((insight: Record<string, unknown>, index: number) => ({
        id: `ai-insight-${Date.now()}-${index}`,
        type: insight.type as WeatherInsight['type'],
        title: insight.title as string,
        description: insight.description as string,
        icon: insight.icon as string,
        confidence: insight.confidence as number,
        priority: insight.priority as WeatherInsight['priority']
      }));    } catch {
      return this.getFallbackInsights(weather);
    }
  }

  private getFallbackInsights(weather: WeatherData): WeatherInsight[] {
    const temp = weather.main.temp;
    const insights: WeatherInsight[] = [];

    if (temp > 30) {
      insights.push({
        id: "fallback-hot",
        type: "outfit",
        title: "Th·ªùi ti·∫øt n√≥ng",
        description: "M·∫∑c qu·∫ßn √°o nh·∫π v√† tho√°ng m√°t.",
        icon: "üëï",
        confidence: 0.9,
        priority: "high"
      });
    }

    return insights;
  }
}

export class LocalAIWeatherService implements AIWeatherService {
  async generateInsights(weather: WeatherData): Promise<WeatherInsight[]> {
    const temp = weather.main.temp;
    const insights: WeatherInsight[] = [];

    if (temp > 30) {
      insights.push({
        id: "local-hot",
        type: "outfit",
        title: "Th·ªùi ti·∫øt n√≥ng",
        description: "M·∫∑c qu·∫ßn √°o nh·∫π, tho√°ng m√°t v√† ƒë·ªôi m≈©.",
        icon: "üåû",
        confidence: 0.9,
        priority: "high"
      });
    } else if (temp < 10) {
      insights.push({
        id: "local-cold",
        type: "outfit", 
        title: "Th·ªùi ti·∫øt l·∫°nh",
        description: "M·∫∑c √°o kho√°c ·∫•m v√† gi·ªØ ·∫•m c∆° th·ªÉ.",
        icon: "üß•",
        confidence: 0.9,
        priority: "high"
      });
    }

    return insights;
  }

  async getChatResponse(question: string, weather: WeatherData): Promise<string> {
    const temp = weather.main.temp;
    const location = weather.name;
    
    if (question.toLowerCase().includes("m·∫∑c")) {
      if (temp > 30) {
        return `V·ªõi nhi·ªát ƒë·ªô ${temp}¬∞C ·ªü ${location}, b·∫°n n√™n m·∫∑c qu·∫ßn √°o nh·∫π v√† tho√°ng m√°t.`;
      } else if (temp < 15) {
        return `Th·ªùi ti·∫øt ${temp}¬∞C ·ªü ${location} kh√° l·∫°nh, n√™n m·∫∑c √°o kho√°c ·∫•m.`;
      }
    }
    
    return `Th·ªùi ti·∫øt hi·ªán t·∫°i ·ªü ${location}: ${temp}¬∞C. T√¥i c√≥ th·ªÉ t∆∞ v·∫•n v·ªÅ trang ph·ª•c v√† ho·∫°t ƒë·ªông ph√π h·ª£p.`;
  }
}

export async function testGeminiConnection(apiKey?: string): Promise<{ success: boolean; message: string }> {
  const key = apiKey || process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  
  if (!key) {
    return { success: false, message: "No Gemini API key found" };
  }

  try {
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${key}`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        contents: [{ parts: [{ text: "Hello" }] }]
      }),
    });

    if (response.ok) {
      return { success: true, message: "Gemini API connection successful" };
    } else {
      return { success: false, message: `API Error ${response.status}` };
    }  } catch (error) {
    return { success: false, message: `Connection error: ${String(error)}` };
  }
}

export function createAIWeatherService(): AIWeatherService {
  const geminiApiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  
  if (geminiApiKey && geminiApiKey !== "your_gemini_api_key_here") {
    console.log("‚úÖ Using Gemini AI service");
    return new GeminiWeatherService(geminiApiKey);
  }
  
  console.log("üîÑ Using Local AI service");
  return new LocalAIWeatherService();
}
